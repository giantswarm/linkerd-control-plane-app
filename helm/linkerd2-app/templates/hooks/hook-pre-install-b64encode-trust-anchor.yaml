{{if .Values.identity -}}
{{if and (.Values.identity.issuer) (eq .Values.identity.issuer.scheme "kubernetes.io/tls") -}}
{{ $hookName := "linkerd-trust-anchor-encoder" -}}
{{/*
The identity deployment requires the root CA cert to be passed as a base64 encoded string arg,
but using the linkerd-trust-anchor cert secret as an env var won't work because Kubernetes will
decode the secret data automatically. Therefore this Job is used to create a new secret with the
data already encoded which will cause it to be encoded again. Then when the env var is decoded
and passed to the identity deployment, it will still be encoded once and will satisfy the
requirements.
*/}}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ $hookName }}
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-delete-policy": "hook-succeeded,hook-failed"
  labels:
    app: {{ $hookName }}
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - "create"
  - "get"
  - "list"
  - "watch"
  - "patch"
  - "update"
- apiGroups:
  - extensions
  resources:
  - podsecuritypolicies
  resourceNames:
  - linkerd-{{ .Release.Namespace }}-control-plane
  verbs:
  - "use"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ $hookName }}
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-delete-policy": "hook-succeeded,hook-failed"
  labels:
    app: {{ $hookName }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ $hookName }}
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-delete-policy": "hook-succeeded,hook-failed"
  labels:
    app: {{ $hookName }}
subjects:
  - kind: ServiceAccount
    name: {{ $hookName }}
    namespace: {{ .Release.Namespace }}
roleRef:
  kind: Role
  name: {{ $hookName }}
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $hookName }}
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-delete-policy": "hook-succeeded,hook-failed"
  labels:
    app: {{ $hookName }}
spec:
  template:
    spec:
      serviceAccountName: {{ $hookName }}
      containers:
      - name: {{ $hookName }}
        image: "{{ .Values.kubectlImage.registry }}/{{ .Values.kubectlImage.name }}:{{ .Values.kubectlImage.tag }}"
        imagePullPolicy: "{{ .Values.kubectlImage.pullPolicy }}"
        command:
        - /bin/sh
        - -e
        - -x
        - -c
        - >-
          while true; do
              export CACERT=$(kubectl -n {{ .Release.Namespace }} get secret linkerd-trust-anchor -o jsonpath="{.data['ca\.crt']}");
              if [ $? -eq 0 ] && [ ! -z "$CACERT" ]; then
                  break;
              fi;
              echo \"waiting for trust anchor cert\";
              sleep 1;
          done;
          kubectl create secret generic linkerd-trust-anchor-base64 -n {{ .Release.Namespace }} --from-literal=ca.crt.base64="${CACERT}" 2>&1
      restartPolicy: Never
  backoffLimit: 6
{{- end}}
{{- end}}
