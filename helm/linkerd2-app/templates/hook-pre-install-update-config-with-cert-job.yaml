---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: global-config-creator
  namespace: {{ .Values.Namespace }}
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": "hook-succeeded,hook-failed"
  labels:
    app: global-config-creator
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  resourceName:
  - linkerd-config
  verbs:
  - "*"
- apiGroups:
  - ""
  resources:
  - secrets
  resourceName:
  - linkerd-identity-issuer
  verbs:
  - "get"
  - "list"
  - "watch"
- apiGroups:
  - extensions
  resources:
  - podsecuritypolicies
  resourceNames:
  - linkerd-{{.Values.Namespace}}-control-plane
  verbs:
  - "use"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: global-config-creator
  namespace: {{ .Values.Namespace }}
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": "hook-succeeded,hook-failed"
  namespace: {{ .Values.Namespace }}
  labels:
    app: global-config-creator
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: global-config-creator
  namespace: {{ .Values.Namespace }}
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-weight": "-4"
    "helm.sh/hook-delete-policy": "hook-succeeded,hook-failed"
  labels:
    app: global-config-creator
subjects:
  - kind: ServiceAccount
    name: global-config-creator
    namespace: {{ .Values.Namespace }}
roleRef:
  kind: Role
  name: global-config-creator
  namespace: {{ .Values.Namespace }}
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: global-config-creator
  namespace: {{ .Values.Namespace }}
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-delete-policy": "hook-succeeded,hook-failed"
  labels:
    app: global-config-creator
spec:
  template:
    spec:
      serviceAccountName: global-config-creator
      containers:
      - name: global-config-creator
        image: "bitnami/kubectl:latest"
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
        command:
        - /bin/bash
        - -e
        - -x
        - -c
        - >-
          while true; do 
              export CERT=`kubectl -n linkerd get secret linkerd-identity-issuer -o jsonpath="{.data['ca\.crt']}" | base64 -d -w 0`;
              if [[ $? == 0 && -n $CERT ]]; then 
                  break; 
              fi; 
              echo \"waiting for cert\"; 
              sleep 1; 
          done; 
          while true; do 
              kubectl -n linkerd get cm linkerd-config -o yaml --export > /tmp/config.yaml; 
              if [[ $? == 0 ]]; then 
                  break; 
              fi; 
              echo "waiting for config"; 
              sleep 1; 
          done; 
          awk -v CERT="$CERT" 'BEGIN{gsub("\n", "\\n", CERT)}; {gsub("REPLACE_ME", CERT);print $0}' /tmp/config.yaml > /tmp/config-out.yaml;
          cat /tmp/config-out.yaml;
          kubectl -n linkerd replace configmap linkerd-config -f /tmp/config-out.yaml;
      restartPolicy: Never
      volumes:
      - name: tmp-volume
        hostPath:
          # directory location on host
          path: /tmp
          # this field is optional
          type: Directory
  backoffLimit: 6
