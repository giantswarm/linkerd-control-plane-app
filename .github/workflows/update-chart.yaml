name: Create Update PR
on:
  push:
    branches:
      - 'main#update'
      - 'master#update'
  workflow_call:
    inputs:
      branch:
        required: true
        type: string
jobs:
  debug_info:
    name: Debug info
    runs-on: ubuntu-20.04
    steps:
      - name: Print github context JSON
        run: |
          cat <<EOF
          ${{ toJson(github) }}
          EOF
  gather_facts:
    name: Gather facts
    runs-on: ubuntu-20.04
    outputs:
      repo_name: ${{ steps.gather_facts.outputs.repo_name }}
      branch: ${{ steps.gather_facts.outputs.branch }}
      base: ${{ steps.gather_facts.outputs.base }}
      is_major: ${{ steps.gather_facts.outputs.is_major }}
      skip: ${{ steps.pr_exists.outputs.skip }}
    steps:
      - name: Gather facts
        id: gather_facts
        run: |
          head="${{ inputs.branch || github.event.ref }}"
          echo "branch=${head}" >> $GITHUB_OUTPUT

          head="${head#refs/heads/}" # Strip "refs/heads/" prefix.
          if [[ $(echo "$head" | grep -o '#' | wc -l) -ge 1 ]]; then
            base="$(echo $head | cut -d '#' -f 1)"
          else
            base="${{ github.event.base_ref }}"
          fi

          base="${base#refs/heads/}" # Strip "refs/heads/" prefix.

          repo_name="$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')"
          echo "repo_name=\"$repo_name\" base=\"$base\" head=\"$head\""
          echo "repo_name=${repo_name}" >> $GITHUB_OUTPUT
          echo "base=${base}" >> $GITHUB_OUTPUT
          echo "head=${head}" >> $GITHUB_OUTPUT
      - name: Check if PR exists
        id: pr_exists
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        run: |
          if gh pr view --repo ${{ github.repository }} ${{ steps.gather_facts.outputs.branch }} | grep -i 'state:[[:space:]]*open' >/dev/null; then
            gh pr view --repo ${{ github.repository }} ${{ steps.gather_facts.outputs.branch }}
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi
  create_update_pr:
    name: Create update PR
    runs-on: ubuntu-20.04
    needs:
      - gather_facts
    if: ${{ needs.gather_facts.outputs.skip != 'true' }}
    env:
      architect_flags: "--organisation ${{ github.repository_owner }} --project ${{ needs.gather_facts.outputs.repo_name }}"
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: '=1.18.1'
      - name: Install architect
        uses: giantswarm/install-binary-action@v1.0.0
        with:
          binary: "architect"
          version: "6.1.0"
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.gather_facts.outputs.branch }}
      - name: Install vendir
        run: |
          wget https://github.com/vmware-tanzu/carvel-vendir/releases/download/v0.32.0/vendir-linux-amd64 -O /tmp/vendir
          SHA_VENDIR=`shasum -a 256 /tmp/vendir | cut -d ' ' -f1`
          [ "$SHA_VENDIR" != "0b52c170f4a30c2b6213ff0048ecc89c9c25c3e4da56eb1e095fcdb335bd82ed" ] && echo "invalid vendir binary" && exit -1
          sudo mv /tmp/vendir /usr/local/bin/vendir && chmod a+x /usr/local/bin/vendir
      - name: Run update
        run: |
          make update-chart
      - name: Set up git identity
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
      - name: Create update commit
        run: |
          git add -A
          git commit -m "Sync chart with upstream."
      - name: Push changes
        env:
          remote_repo: "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
        run: |
          git push "${remote_repo}" HEAD:${{ needs.gather_facts.outputs.branch }}
      - name: Update PR
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          base: "${{ needs.gather_facts.outputs.base }}"
        run: |
          hub pull-request -f -m "Update chart" -a ${{ github.actor }} -b ${{ env.base }} -h ${{ needs.gather_facts.outputs.branch }}
